#target illustrator/**    * Adapted from code by Carlos Canto that opens a MultiPage PDF in Illustrator    * Instead, the following code creates a blank Illustrator document and strips all the symbols in a pdf to the symbols palette    * The intended target is the (Lilypond) Feta Font Table PDF (Full) that comes with this package    *     * Copyright 2012 Carlos Canto    * Copyright 2014 Ben Wetherfield    */// Creates dialog box to select file - var win = new Window ("dialog", "Take Symbols from PDF");var fileGroup = win.add("group"); // this is the group on the left, it holds the File buttonvar btnFile = fileGroup.add("button", undefined, "File..."); // button to select the PDF to openvar grpRight = win.add("group"); // group on the right, to hold everything elsevar txtFile = grpRight.add("edittext",undefined); // to hold selected PDF file pathvar grpPanel = grpRight.add("group"); var pagesPanel = grpPanel.add("panel", undefined, "Page Range");var lblFrom = pagesPanel.add("statictext",undefined,"From:");var txtFrom = pagesPanel.add("edittext",undefined, 1); var lblTo = pagesPanel.add("statictext",undefined,"To:");var txtTo = pagesPanel.add("edittext",undefined, 8);var lblStatus = grpRight.add("statictext",undefined,"Full Feta Font Library PDF has 8 pages");var btnGroup = grpPanel.add("group");var btnOk = btnGroup.add("button", undefined, "Open");var btnCancel = btnGroup.add("button", undefined, "Cancel");win.orientation = pagesPanel.orientation = "row"; // two items fileGroup and grpRightwin.alignChildren = "right";fileGroup.orientation = "column";fileGroup.alignment = "top";txtFile.alignment = ["fill","top"];	grpRight.orientation = "column";btnGroup.orientation = "column";btnOk.enabled = false; // disable this button until a valid file is suppliedtxtFrom.characters = txtTo.characters = 3;btnFile.active = true; // receive the first "Enter" // get the PDF filebtnFile.onClick = function() {	txtFile.text = ""; // clear previous File path if any	btnOk.enabled = false; // disable the Ok button	var fileRef = File.openDialog ("Select PDF...", "*.pdf"); // get the file         // added check that the user did not just cancel the file selection dialog box    if(fileRef) {        fileRef = new File(fileRef.fsName.replace("file://",""));        }    	if(fileRef!= null && fileRef.exists) { // check if it is valid file, it should be, unless after clicking a file, the name gets edited		txtFile.text = fileRef.fsName; // show the file Path here		btnOk.enabled = true; // enable the Ok button		txtTo.active = true; // move focus to change the last page to open		}    }btnOk.onClick = function() {    win.close(); // close when done    main(); // call main function.    }//------------------------ on leaving this text, check again if file exist, in case file path is typed instead of clicking the File...buttontxtFile.onDeactivate = function() {	//alert("on deactivate")	var file = File(txtFile.text); // create a file based on the text edit control	if (file.exists){ // and check for existance, if it does		btnOk.enabled = true; // enable the Ok button	}	else { // if it does not exist		btnOk.enabled = false; // disable the Ok button	}}//------------------------win.center ();win.show();//-------------------------END UI CODE function main() // Open each page in the range, group all art, move to a new document, then	{							// with all pages on top of each other, create artboards and move each page									// to its final own layer, own artboard.// get first page and last page to open         var from = txtFrom.text;		var to = txtTo.text;// create destination document, pdf open options, etc		app.userInteractionLevel = UserInteractionLevel.DONTDISPLAYALERTS;		var fileRef = File(txtFile.text); // get file from text edit		var idoc = app.documents.add(); // add a document;		var pdfOptions = app.preferences.PDFFileOptions;		pdfOptions.pDFCropToBox = PDFBoxType.PDFBOUNDINGBOX;		var spacing = 10; // space between artboards		var arrPagesInfo = []; // to hold each PDF page name, doc size and art position				for (j=from; j<=to; j++) // open all pages in range, group art, and move the dest document			{				pdfOptions.pageToOpen = j;  // Open a file using these preferences				var pdfDoc = open(fileRef, DocumentColorSpace.RGB);				var pdfLayer = pdfDoc.activeLayer;// add a group and group all items				var items = pdfLayer.pageItems; // get all items in layer				var tempGrp = pdfDoc.groupItems.add(); // to group everything in page								for (i=items.length-1; i>0; i--) // group all items					{						items[i].move(tempGrp,ElementPlacement.PLACEATBEGINNING);					}// duplicate grouped page onto dest document so that the symbols can be extracted in that document				newItem = tempGrp.duplicate( idoc,ElementPlacement.PLACEATBEGINNING);// close current PDF page										pdfDoc.close (SaveOptions.DONOTSAVECHANGES);					} // end for all pages to open			var ilayer = idoc.layers[idoc.layers.length-1]; // the one layer so far         // remove default symbols from panel                  idoc.symbols.removeAll();// add all symbol items in document to symbols palette         var glyphs = idoc.pageItems;         for (i = glyphs.length - 1; i >= 0; i--) {             if (((glyphs[i].typename === "PathItem") && (glyphs[i].parent.typename !== "CompoundPathItem"))              || (glyphs[i].typename === "CompoundPathItem")) {                 idoc.symbols.add(glyphs[i]);                 }             }                  idoc.pageItems.removeAll();         	}